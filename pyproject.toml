[build-system]
requires = ["setuptools>=61.0", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "bassera-platform"
version = "1.0.0"
description = "منصة بصيرة - مساعد ذكي باللغة العربية مبني على OVOS"
readme = "README.md"
requires-python = ">=3.8"
license = {text = "MIT"}
authors = [
    {name = "Bassera Team", email = "info@bassera.ai"},
]
maintainers = [
    {name = "Bassera Team", email = "info@bassera.ai"},
]
keywords = ["voice assistant", "arabic", "ovos", "ai", "speech recognition", "text to speech"]
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Developers",
    "Intended Audience :: End Users/Desktop",
    "License :: OSI Approved :: MIT License",
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.8",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Topic :: Multimedia :: Sound/Audio :: Speech",
    "Topic :: Scientific/Engineering :: Artificial Intelligence",
    "Topic :: Software Development :: Libraries :: Python Modules",
    "Natural Language :: Arabic",
]
dependencies = [
    "ovos-core>=0.0.8",
    "ovos-messagebus>=0.0.8",
    "ovos-audio>=0.0.8",
    "ovos-skills>=0.0.8",
    "ovos-listener>=0.0.8",
    "ovos-config>=0.0.8",
    "ovos-utils>=0.0.8",
    "speech-recognition>=3.10.0",
    "pyaudio>=0.2.11",
    "pyttsx3>=2.90",
    "gTTS>=2.3.0",
    "sounddevice>=0.4.6",
    "soundfile>=0.12.1",
    "numpy>=1.21.0",
    "nltk>=3.8",
    "spacy>=3.4.0",
    "flask>=2.3.0",
    "flask-cors>=4.0.0",
    "requests>=2.28.0",
    "pyyaml>=6.0",
    "click>=8.1.0",
    "colorama>=0.4.6",
]

[project.optional-dependencies]
dev = [
    "pytest>=7.2.0",
    "black>=22.10.0",
    "flake8>=5.0.0",
    "mypy>=0.991",
    "pre-commit>=2.20.0",
]
docs = [
    "sphinx>=5.3.0",
    "sphinx-rtd-theme>=1.2.0",
    "myst-parser>=0.18.0",
]
test = [
    "pytest>=7.2.0",
    "pytest-cov>=4.0.0",
    "pytest-mock>=3.10.0",
]

[project.scripts]
bassera = "start_basseera:main"

[project.urls]
"Homepage" = "https://github.com/bassera-platform/bassera-app"
"Bug Reports" = "https://github.com/bassera-platform/bassera-app/issues"
"Source" = "https://github.com/bassera-platform/bassera-app"
"Documentation" = "https://docs.bassera.ai"
"Changelog" = "https://github.com/bassera-platform/bassera-app/blob/main/CHANGELOG.md"

[tool.setuptools.packages.find]
where = ["src"]
include = ["bassera*"]
exclude = ["tests*"]

[tool.setuptools.package-data]
"*" = ["*.yaml", "*.yml", "*.json", "*.txt", "*.md"]

[tool.black]
line-length = 88
target-version = ['py38']
include = '\.pyi?$'
extend-exclude = '''
(
  /(
      \.eggs
    | \.git
    | \.hg
    | \.mypy_cache
    | \.tox
    | \.venv
    | _build
    | buck-out
    | build
    | dist
    | venv
  )/
)
'''

[tool.isort]
profile = "black"
line_length = 88
multi_line_output = 3
include_trailing_comma = true
force_grid_wrap = 0
use_parentheses = true
ensure_newline_before_comments = true

[tool.flake8]
max-line-length = 88
extend-ignore = ["E203", "W503"]
exclude = [
    ".git",
    "__pycache__",
    "build",
    "dist",
    ".eggs",
    "*.egg-info",
    ".venv",
    "venv",
]

[tool.mypy]
python_version = "3.8"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true

[tool.pytest.ini_options]
minversion = "6.0"
addopts = "-ra -q --strict-markers --strict-config"
testpaths = ["tests"]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
markers = [
    "slow: marks tests as slow (deselect with '-m "not slow"')",
    "integration: marks tests as integration tests",
    "unit: marks tests as unit tests",
]

[tool.coverage.run]
source = ["src"]
omit = [
    "*/tests/*",
    "*/test_*",
    "setup.py",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\bProtocol\):",
    "@(abc\.)?abstractmethod",
]